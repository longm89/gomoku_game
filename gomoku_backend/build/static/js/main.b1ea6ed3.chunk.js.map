{"version":3,"sources":["strategies/waysToWin.js","strategies/calculateWinner.js","strategies/lineScores.js","strategies/listOfMoves.js","strategies/findNextMove.js","strategies/estimateScore.js","components/Welcome.js","components/Score.js","components/Square.js","components/Board.js","components/Status.js","components/Footer.js","scoreServices.js","index.js"],"names":["waysToWin","size","stretch","startI","endI","startJ","endJ","calculateWinner","squares","length","ways","s","way","i","j","line","map","cord","xState","xScore","oState","row","slice","oScore","Dist","a","b","findNextMove","xIsNext","Moves","list","minDist","Array","fill","g","h","push","sort","filter","Math","floor","listOfMoves","alpha","beta","count","nextMove","depth","gameTermination","x","y","node","point","pointX","pointO","k","heuristicScore","newSquares","arr","afterX","afterO","Welcome","className","Score","props","humanScore","computerScore","Square","isLastMove","isWinning","style","lastSymbol","cursor","onClick","value","Board","lastMove","handleClick","rowIndex","column","columnIndex","col","toString","renderSquare","Status","winnerLine","Footer","scores","baseUrl","getAll","axios","get","response","data","newScores","addHumanScore","scoreToAdd","score","put","addComputerScore","Game","useState","humanStarts","setHumanStarts","setSquares","humanIsNext","setHumanIsNext","setLastMove","setComputerScore","setHumanScore","totalScores","setTotalScores","useEffect","scoreService","then","console","log","next","newTotalScores","restartButtonStyle","display","whoWillStart","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b1ea6ed3.chunk.js","sourcesContent":["\r\n//there are 4 kinds of lines to win the game\r\n//Given the size of the board, we will check for 4 kinds of lines with\r\n// the starting point [row, column] with row in [startI, endI], column in [startJ, endJ]\r\nconst waysToWin = (size) => [\r\n  { stretch: [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4]],\r\n    startI: 0, endI: size, startJ: 0, endJ: size - 4 },\r\n  { stretch: [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0]],\r\n    startI: 0, endI: size - 4, startJ: 0, endJ: size },\r\n  { stretch: [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]],\r\n    startI: 0, endI: size - 4, startJ: 0, endJ: size - 4 },\r\n  { stretch: [[4, 0], [3, 1], [2, 2], [1, 3], [0, 4]],\r\n    startI: 0, endI: size - 4, startJ: 0, endJ: size - 4 },\r\n];\r\n\r\nexport default waysToWin;","import waysToWin from './waysToWin';\r\nexport default function calculateWinner(squares) {\r\n  // This function returns the line of winning if there's one, otherwise, it returns null\r\n  // We scan the squares to find all possible lines of 5 that can lead to a winning\r\n  let size = squares.length;\r\n  let ways = waysToWin(size);\r\n  for (let s = 0; s < ways.length; s++) {\r\n    let way = ways[s];\r\n    for (let i = way.startI; i < way.endI; i++)\r\n      for (let j = way.startJ; j < way.endJ; j++) {\r\n        let line = way.stretch.map(cord => [cord[0] + i, cord[1] + j]).map(cord => squares[cord[0]][cord[1]]);\r\n        if (line[0] !== null && line[0] === line[1] && line[1] === line[2] && line[2] === line[3] && line[3] === line[4]) {\r\n          return way.stretch.map(cord => [cord[0] + i, cord[1] + j]);\r\n        }\r\n      }\r\n  }\r\n  return null;\r\n}","// We will estimate the score of a board, given whether the next move will be played by X or O\r\n// To do that, we look at each line of 5 and give a certain score for each of them.\r\n// We could then scan the board for all lines of 5 and give a total score.\r\n// This file contains the state of the line and its corresponding score\r\nconst xState = [\r\n  // 1st kind of lines\r\n  ['X','X','X','X','X'],\r\n  [null,'X','X','X','X'],\r\n  ['X','X','X','X',null],\r\n  ['X','X','X',null,'X'],\r\n  ['X',null,'X','X','X'],\r\n  ['X','X',null,'X','X'],\r\n  // 2nd kind of lines\r\n  [null,'X','X','X',null],\r\n  ['X','X','X',null,null],\r\n  [null,null,'X','X','X'],\r\n  [null,'X',null,'X','X'],\r\n  ['X',null,'X',null,'X'],\r\n  ['X','X',null,'X',null],\r\n  [null,'X','X',null,'X'],\r\n  ['X',null,'X','X',null],\r\n  // 3rd kinds of lines\r\n  [null,'X',null,'X',null],\r\n  [null,'X','X',null,null],\r\n  [null,null,'X','X',null],\r\n];\r\n// the first column of xScore is the score when X is going to be played next and the second is when O is played next\r\nconst xScore = [\r\n  [10**8, 10**8],\r\n  [10**8, 10**7],\r\n  [10**8, 10**7],\r\n  [10**8, 10**7],\r\n  [10**8, 10**7],\r\n  [10**8, 10**7],\r\n\r\n  [10**6, 10**5],\r\n  [10**5, 10**4],\r\n  [10**5, 10**4],\r\n  [10**5, 10**4],\r\n  [10**5, 10**4],\r\n  [10**5, 10**4],\r\n  [10**5, 10**4],\r\n  [10**5, 10**4],\r\n\r\n  [10**2, 10],\r\n  [10**2, 10],\r\n  [10**2, 10],\r\n];\r\n\r\nlet oState = xState.map(row => row.slice());\r\nfor (let i = 0; i < xState.length; i++)\r\n  for (let j =0; j < xState[i].length; j++)\r\n    if (oState[i][j] === 'X') {\r\n      oState[i][j] = 'O';\r\n    }\r\n// the first column of oScore is the score when O is going to be played next and the second is when X is played next\r\nlet oScore = xScore.map(row => row.slice());\r\nfor (let i = 0; i < oScore.length; i++){\r\n  oScore[i][0] = - xScore[i][0];\r\n  oScore[i][1] = - xScore[i][1];\r\n}\r\n\r\nexport { xState, xScore, oState, oScore };","// generate a possible list of moves, from the ones that are closest to the squares that have been played to other squares of the outside.\r\n// We only choose maxNumberOfMoves=60 at most so that the program can run quickly\r\n// We choose also the moves that have a distance of <=2 from a move that has been played\r\nconst listOfMoves = (squares) => {\r\n  let list = []; // return a list of possible moves, with maximum maxNumberOfMoves if there are more\r\n  const size = squares.length;\r\n  const maxNumberOfMoves = 60;\r\n  let minDist = new Array(size).fill().map(() => Array(size).fill(1000000));\r\n  for (let i = 0; i < size; i ++)\r\n    for (let j = 0; j < size; j++) {\r\n      for (let g = 0; g < size; g++)\r\n        for (let h = 0; h <size; h++)\r\n          if (squares[g][h] !== null)\r\n            if (minDist[i][j] > Dist([i,j], [g,h])) {\r\n              minDist[i][j] = Dist([i,j],[g,h]);\r\n            }\r\n    }\r\n  for (let i = 0; i < size; i ++)\r\n    for (let j = 0; j < size; j++) {\r\n      if (minDist[i][j] > 0.0001 && minDist[i][j] < 4) {\r\n        list.push([i,j,minDist[i][j]]);\r\n      }\r\n    }\r\n  list.sort((a,b) => {\r\n    if (minDist[b[0]][b[1]] > minDist[a[0]][a[1]]) {\r\n      return -1;\r\n    }\r\n    if (minDist[b[0]][b[1]] < minDist[a[0]][a[1]]) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  });\r\n\r\n  if (list.length > maxNumberOfMoves) {\r\n    list = list.slice(0, maxNumberOfMoves);\r\n  }\r\n  list = list.filter(cord => cord[2] <= 2);\r\n  if (list.length === 0) {\r\n    list.push([Math.floor(size/2), Math.floor(size/2)]);\r\n  }\r\n  return list;\r\n};\r\n\r\nfunction Dist(a,b) {\r\n  return ((a[0]-b[0])**2 + (a[1] - b[1])**2)**0.5;\r\n}\r\n\r\nexport { listOfMoves, Dist };\r\n","import heuristicScore from './estimateScore';\r\nimport { listOfMoves }  from './listOfMoves';\r\nimport calculateWinner from './calculateWinner';\r\nfunction findNextMove (squares, xIsNext) {\r\n  // Given the board squares and who is going to play next, we look for the next move\r\n  const Moves = listOfMoves(squares);\r\n  const depth = 2;\r\n  const alpha = - (10**9);\r\n  const beta = 10**9;\r\n  let count = 0;\r\n  const maxCount = 3000;\r\n  // each time we test a new move, we increase count by 1. If count >= maxCount, we stop and take\r\n  // the best move possible\r\n  const nextMove = function (depth, alpha, beta, squares, xIsNext) {\r\n    // Given the squares, xIsNext is true/false, this function returns the next move,\r\n    // with coordinates move.x, move.y and the point of the move: move.point.\r\n    // console.log('the value of depth is', depth);\r\n    const gameTermination = calculateWinner(squares);\r\n    if (gameTermination !== null) {\r\n      let x, y;\r\n      for (let node = 0; node < Moves.length; node++) {\r\n        let i = Moves[node][0];\r\n        let j = Moves[node][1];\r\n        if (squares[i][j] === null) {\r\n          x = i;\r\n          y = j;\r\n          break;\r\n        }\r\n      }\r\n      if (squares[gameTermination[0][0]][gameTermination[0][1]] === 'X') {\r\n        return { point: (10**9), x, y, pointX: 10**9, pointO: 0  };\r\n      } else {\r\n        return { point: -(10**9),x, y, pointX: 0, pointO: - (10**9) };\r\n      }\r\n    }\r\n\r\n    if (depth === 0) {\r\n      return { ...heuristicScore(squares, xIsNext) };\r\n    }\r\n\r\n    if (xIsNext) {\r\n      let point = - (2*10**9);\r\n      let x,y, pointX, pointO;\r\n      let newSquares = squares.map(arr => arr.slice());\r\n      for (let node = 0; node < Moves.length; node++) {\r\n        let i = Moves[node][0];\r\n        let j = Moves[node][1];\r\n        if (squares[i][j] === null) {\r\n          count += 1;\r\n          if (count > maxCount) {\r\n            break;\r\n          }\r\n          newSquares[i][j] = 'X';\r\n          let afterX = nextMove(depth - 1, alpha, beta, newSquares, false);\r\n          newSquares[i][j] = null;\r\n          if (point < afterX.point) {\r\n            point = afterX.point;\r\n            pointX = afterX.pointX;\r\n            pointO = afterX.pointO;\r\n            x = i;\r\n            y = j;\r\n          }\r\n          if (alpha < point) {\r\n            alpha = point;\r\n          }\r\n          if (alpha >= beta) {\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return { point, x, y, pointX, pointO };\r\n    } else {\r\n      let point = (2*10**9), pointX, pointO;\r\n      let x,y;\r\n      let newSquares = squares.map(arr => arr.slice());\r\n      for (let node = 0; node < Moves.length; node++) {\r\n        let i = Moves[node][0];\r\n        let j = Moves[node][1];\r\n        if (squares[i][j] === null) {\r\n          count += 1;\r\n          if (count > maxCount) {\r\n            break;\r\n          }\r\n          newSquares[i][j] = 'O';\r\n          let afterO = nextMove(depth - 1, alpha, beta, newSquares, true);\r\n          newSquares[i][j] = null;\r\n          if (point > afterO.point) {\r\n            point = afterO.point;\r\n            pointX = afterO.pointX;\r\n            pointO = afterO.pointO;\r\n            x = i;\r\n            y = j;\r\n          }\r\n          if (beta > point) {\r\n            beta = point;\r\n          }\r\n          if (beta <= alpha) {\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return { point, x , y, pointX, pointO };\r\n    }\r\n  };\r\n\r\n  return nextMove(depth, alpha, beta, squares, xIsNext);\r\n}\r\nexport default findNextMove;\r\n","import waysToWin from './waysToWin';\r\nimport { xState, xScore, oState, oScore } from './lineScores';\r\nexport default function heuristicScore (squares, xIsNext) {\r\n  // this function estimates the score of any board, given who is going to play next\r\n  // it scans all possible types of line of 5, each one is given a score, and sums up all the scores\r\n  let size = squares.length;\r\n  let ways = waysToWin(size);\r\n  let point = 0, pointX = 0, pointO = 0 ; //the number of points of the board, given who is going to play next\r\n  for (let s = 0; s < ways.length; s++) {\r\n    let way = { ...ways[s] };\r\n    for (let i = way.startI; i < way.endI; i++)\r\n      for (let j = way.startJ; j < way.endJ; j++)\r\n        for (let k = 0; k < xState.length; k++) {\r\n          let line = way.stretch.map(cord => [cord[0] + i, cord[1] + j]).map(cord => squares[cord[0]][cord[1]]);\r\n          if (xState[k][0] === line[0] && xState[k][1] === line[1] && xState[k][2] === line[2]) {\r\n            if (xState[k][3] === line[3] && xState[k][4] === line[4]) {\r\n              if (xIsNext) {\r\n                point += xScore[k][0];\r\n                pointX += xScore[k][0];\r\n              } else {\r\n                point += xScore[k][1];\r\n                pointX += xScore[k][1];\r\n              }\r\n              break;\r\n            }\r\n          }\r\n        }\r\n    for (let i = way.startI; i < way.endI; i++)\r\n      for (let j = way.startJ; j < way.endJ; j++)\r\n        for (let k = 0; k < oState.length; k++) {\r\n          let line = way.stretch.map(cord => [cord[0] + i, cord[1] + j]).map(cord => squares[cord[0]][cord[1]]);\r\n          if (oState[k][0] === line[0] && oState[k][1] === line[1] && oState[k][2] === line[2]) {\r\n            if (oState[k][3] === line[3] && oState[k][4] === line[4]) {\r\n              if (xIsNext) {\r\n                point += oScore[k][1];\r\n                pointO += oScore[k][1];\r\n              } else {\r\n                point += oScore[k][0];\r\n                pointO += oScore[k][0];\r\n              }\r\n              break;\r\n            }\r\n          }\r\n        }\r\n  }\r\n\r\n  return { point, pointX, pointO };\r\n}","import React from 'react';\r\nconst Welcome = () =>  {\r\n  return <div className = 'heading'>\r\n    <h1>Welcome to the game of Gomoku</h1>\r\n    <p>The person who gets the first Five wins!</p>\r\n  </div>;\r\n};\r\n\r\nexport default Welcome;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nconst Score = (props) =>\r\n  <div>\r\n    <h2>Scores</h2>\r\n    <div className = \"scoreRow\">\r\n      <div className = \"humanScore\">\r\n        <h3>Human</h3>\r\n        <p>{props.humanScore}</p>\r\n      </div>\r\n      <div className = \"computerScore\">\r\n        <h3>Computer</h3>\r\n        <p>{props.computerScore}</p>\r\n      </div>\r\n    </div>\r\n  </div>;\r\nScore.propTypes = {\r\n  humanScore: PropTypes.number,\r\n  computerScore: PropTypes.number,\r\n};\r\nexport default Score;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nconst Square = (props) => {\r\n  return (\r\n    <button\r\n      className={`square \r\n                ${props.isLastMove ? 'hightLight' : 'normal'} \r\n                ${props.isWinning ? 'winning animate__animated animate__tada animate__repeat-3' : ''}`}\r\n      style={props.lastSymbol === 'O' ? { cursor: 'default' } : { cursor: 'wait' }}\r\n      onClick={() => props.onClick()}\r\n    >\r\n      {props.value}\r\n    </button>\r\n  );\r\n};\r\nSquare.propTypes = {\r\n  isLastMove: PropTypes.bool,\r\n  isWinning: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  value: PropTypes.string,\r\n  lastSymbol: PropTypes.string\r\n};\r\nexport default Square;","import calculateWinner from '../strategies/calculateWinner';\r\nimport Square from './Square';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nconst Board = ({ squares, lastMove, handleClick }) => {\r\n  const renderSquare = (row,col) => {\r\n    return <Square key={col.toString()}\r\n      value={squares[row][col]}\r\n      onClick={() => handleClick(row, col)}\r\n      lastSymbol={lastMove ? squares[lastMove[0]][lastMove[1]] : 'O'}\r\n      //highlight the last move\r\n      isLastMove={lastMove && (lastMove[0] === row) && (lastMove[1] === col)}\r\n      isWinning={calculateWinner(squares)\r\n        && calculateWinner(squares).filter(cord => (cord[0]=== row && cord[1] === col)).length > 0}\r\n    />;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {squares.map((row, rowIndex) =>\r\n        <div className=\"boardRow\" key={rowIndex.toString()}>\r\n          {row.map((column, columnIndex) => renderSquare(rowIndex, columnIndex))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nBoard.propTypes = {\r\n  squares:PropTypes.array,\r\n  handleClick: PropTypes.func,\r\n  lastMove:PropTypes.array\r\n};\r\n\r\nexport default Board;","import calculateWinner from '../strategies/calculateWinner';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nconst Status = (props) => {\r\n  const winnerLine = calculateWinner(props.squares);\r\n  return (\r\n    <div className = 'status'>\r\n      {winnerLine !== null ?\r\n        props.squares[winnerLine[0][0]][winnerLine[0][1]] === 'X' ?\r\n          <div>\r\n            <h2>Winner</h2>\r\n            <p className = 'animate__animated animate__flash animate__repeat-3'>Human! </p>\r\n          </div> :\r\n          <div>\r\n            <h2>Winner</h2>\r\n            <p className = 'animate__animated animate__flash animate__repeat-3'>Computer!!</p>\r\n          </div>\r\n        : props.xIsNext ?\r\n          <div>\r\n            <h2>Next player</h2>\r\n            <p>Human (X): Click on a square to play</p>\r\n          </div> :\r\n          <div>\r\n            <h2>Next player</h2>\r\n            <p>Computer (O): Thinking...</p>\r\n          </div>\r\n      }\r\n    </div>\r\n  );\r\n};\r\nStatus.propTypes = {\r\n  squares:PropTypes.array,\r\n  handleClick: PropTypes.func,\r\n  lastMove:PropTypes.array,\r\n  xIsNext:PropTypes.bool\r\n};\r\nexport default Status;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nconst Footer = ({ scores }) => {\r\n  return (\r\n    <div className='footer'>\r\n      <p>The game has been played <span className='scoreStat'>{scores.humanScore + scores.computerScore}</span> times.</p>\r\n      <p>Human: <span className='scoreStat'>{scores.humanScore}</span> vs Computer: <span className='scoreStat'>{scores.computerScore}</span></p>\r\n    </div>\r\n  );\r\n\r\n};\r\nFooter.propTypes = {\r\n  scores: PropTypes.object,\r\n};\r\nexport default Footer;\r\n","import axios from 'axios';\r\nconst baseUrl = '/api/scores';\r\n\r\nconst getAll = async () => {\r\n  const response = await axios.get(baseUrl);\r\n  const data = response.data[0];\r\n  const newScores = { humanScore: data.humanScore, computerScore: data.computerScore };\r\n  return newScores;\r\n};\r\n\r\nconst addHumanScore = async () => {\r\n  const scoreToAdd = { score: 1 };\r\n  const response = await axios.put(`${baseUrl}/humanScore`, scoreToAdd);\r\n  return response.data;\r\n};\r\n\r\nconst addComputerScore = async () => {\r\n  const scoreToAdd = { score: 1 };\r\n  const response = await axios.put(`${baseUrl}/computerScore`, scoreToAdd);\r\n  return response.data;\r\n};\r\n\r\nexport default {\r\n  getAll, addHumanScore, addComputerScore\r\n};","import { useState, useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport React from 'react';\r\nimport './index.css';\r\nimport calculateWinner  from './strategies/calculateWinner';\r\nimport findNextMove  from './strategies/findNextMove';\r\nimport Welcome from './components/Welcome';\r\nimport Score from './components/Score';\r\nimport Board from './components/Board';\r\nimport Status from './components/Status';\r\nimport Footer from './components/Footer';\r\nimport scoreService from './scoreServices';\r\nexport const size = 15;\r\nconst Game = () => {\r\n  const [humanStarts, setHumanStarts] = useState(true); // whether human will start the game\r\n  const [squares, setSquares] = useState(new Array(size).fill().map(() => new Array(size).fill(null)));\r\n  const [humanIsNext, setHumanIsNext] = useState(humanStarts); // inside a game, whether human is going to play\r\n  const [lastMove, setLastMove] = useState(null);\r\n  const [computerScore, setComputerScore] = useState(0); // current computer score\r\n  const [humanScore, setHumanScore] = useState(0);   // current human score\r\n  const [totalScores, setTotalScores] = useState({ humanScore: 0, computerScore: 0 });\r\n  // total scores from all people who played the game\r\n\r\n  useEffect(() => {\r\n    scoreService.getAll() // get the current scores from the database\r\n      .then(scores => {setTotalScores(scores); console.log('The scores is ', scores);});\r\n  }, []);\r\n\r\n  // The function findNextMove contains a heavy calculation, to calculate the next more for the\r\n  // computer\r\n  useEffect(() => {\r\n    if (calculateWinner(squares) === null && !humanIsNext) {\r\n      // if the game is not yet determined and if the computer is going to play next\r\n      let newSquares = squares.map(arr => arr.slice());\r\n      const next = findNextMove(newSquares, humanIsNext);\r\n      newSquares[next.x][next.y] = 'O';\r\n      setSquares(newSquares);\r\n      setLastMove([next.x, next.y]);\r\n      setHumanIsNext(true);\r\n      if (calculateWinner(newSquares) !== null) {\r\n        setComputerScore(computerScore + 1);\r\n        scoreService.addComputerScore()\r\n          .then(newTotalScores => {setTotalScores(newTotalScores);});\r\n      }\r\n    }\r\n  }, [humanIsNext, humanStarts]);\r\n\r\n  const handleClick = (row,col) => {\r\n    if (squares[row][col] || calculateWinner(squares) !== null || !humanIsNext) {\r\n      return;\r\n    }\r\n    let newSquares = squares.map(arr => arr.slice());\r\n    newSquares[row][col] = 'X';\r\n    setSquares(newSquares);\r\n    setLastMove([row, col]);\r\n    setHumanIsNext(false);\r\n    if (calculateWinner(newSquares) !== null) {\r\n      setHumanScore(humanScore + 1);\r\n      scoreService.addHumanScore()\r\n        .then(newTotalScores => {setTotalScores(newTotalScores);});\r\n    }\r\n  };\r\n\r\n  const reStart = () => {\r\n    setSquares(new Array(size).fill().map(() => new Array(size).fill(null)));\r\n    let whoWillStart = ! humanStarts;\r\n    setHumanStarts(whoWillStart);\r\n    setHumanIsNext(whoWillStart);\r\n    setLastMove(null);\r\n  };\r\n  const restartButtonStyle = lastMove === null ? { display: 'none' } : { display: 'initial' };\r\n  return (\r\n    <div className=\"total_game\">\r\n      <Welcome/>\r\n      <div className=\"board_and_info\">\r\n        <Board\r\n          squares={squares}\r\n          lastMove={lastMove}\r\n          handleClick={handleClick}\r\n        />\r\n\r\n        <div className=\"info\">\r\n          <div className=\"status\">\r\n            <Status squares={squares} xIsNext={humanIsNext}/>\r\n          </div>\r\n\r\n          <div className=\"score\">\r\n            <Score humanScore={humanScore} computerScore={computerScore}/>\r\n          </div>\r\n\r\n          <button onClick={reStart}\r\n            style={restartButtonStyle}\r\n          >\r\n            {calculateWinner(squares) === null ? 'Restart the game ? ':'Another game ?'}\r\n          </button>\r\n          <Footer scores={totalScores}/>\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n\r\n};\r\n\r\nReactDOM.render(\r\n  <Game/>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}